name: Laravel Deployment

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Alasan untuk deployment manual (opsional)'
        required: false

jobs:
  deploy:
    environment: Prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} 'bash -s' << 'EOF'
          set -euo pipefail

          PROJECT_DIR="$HOME/apps/TicketingTransportation"
          REPO_URL="https://github.com/Ganesyk12/TicketingTransportation.git"

          # Pastikan network eksternal ada
          docker network ls --format '{{.Name}}' | grep -qx 'tunnel' || docker network create tunnel

          # Siapkan direktori kerja
          mkdir -p "$PROJECT_DIR"

          # ðŸ”§ Perbaiki kepemilikan (tanpa sudo) agar git bisa menulis
          uid=$(id -u); gid=$(id -g)
          docker run --rm -v "$PROJECT_DIR":/work alpine sh -c "chown -R $uid:$gid /work" || true

          # Clone / Pull
          if [ ! -d "$PROJECT_DIR/.git" ]; then
            echo 'Project directory not a Git repo. Cloning...'
            git clone "$REPO_URL" "$PROJECT_DIR"
          else
            echo 'Project directory found. Pulling latest changes...'
            cd "$PROJECT_DIR"
            git fetch origin
            git checkout main || true
            # Kalau sebelumnya gagal pull karena permission, maksa sinkron ke remote:
            git reset --hard origin/main
          fi

          cd "$PROJECT_DIR"

          # Safety: pastikan config Nginx ada (boleh dihapus kalau file sudah di-repo)
          if [ ! -f nginx/default.conf ]; then
            mkdir -p nginx
            cat > nginx/default.conf <<'CONF'
          server {
              listen 80;
              server_name _;
              root /var/www/html/public;
              index index.php index.html;

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include        fastcgi_params;
                  fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  fastcgi_pass   app:9000;
              }

              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp)$ {
                  try_files $uri =404;
                  expires 30d;
                  access_log off;
              }
          }
          CONF
              fi

              # Tulis .env dari secrets
              cat > .env << ENVEOF
              APP_ENV=production
              APP_KEY=${{ secrets.APP_KEY }}
              DB_CONNECTION=${{ secrets.DB_CONNECTION }}
              DB_HOST=${{ secrets.DB_HOST }}
              DB_DATABASE=${{ secrets.DB_DATABASE }}
              DB_USERNAME=${{ secrets.DB_USERNAME }}
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              ENVEOF

              # Pilih docker compose v2/v1
              if command -v docker compose >/dev/null 2>&1; then
                DCMD="docker compose"
              elif command -v docker-compose >/dev/null 2>&1; then
                DCMD="docker-compose"
              else
                echo "docker compose not found"; exit 1
              fi

              # Rebuild & up
              $DCMD down || true
              $DCMD build --no-cache
              $DCMD up -d

              # Composer & Artisan (karena bind-mount)
              $DCMD exec -T app composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader
              $DCMD exec -T app php artisan config:cache
              $DCMD exec -T app php artisan migrate --force || true
              $DCMD exec -T app chown -R www-data:www-data storage bootstrap/cache
              $DCMD exec -T app chmod -R 775 storage bootstrap/cache
              EOF


